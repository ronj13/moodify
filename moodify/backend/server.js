
// backend/server.js
const express = require('express');
const cors = require('cors');
const SpotifyWebApi = require('spotify-web-api-node');
const fetch = require('node-fetch'); // Import node-fetch
const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

const spotifyApi = new SpotifyWebApi({
    clientId: '957639a18400425fb949acda676fe622',
    clientSecret: '2302f5464c5a41f2933f556aeb2970f7',
    redirectUri: 'http://localhost:5174/callback',
});

// // Endpoint to get access token
// app.post('/login', (req, res) => {
//     const { code } = req.body;
//     spotifyApi.authorizationCodeGrant(code).then(data => {
//         res.json({
//             accessToken: data.body.access_token,
//             refreshToken: data.body.refresh_token,
//             expiresIn: data.body.expires_in,
//         });
//     }).catch(err => {
//         res.status(400).json({ error: 'Failed to authenticate' });
//     });
// });

// Endpoint to refresh the access token
app.post('/refresh', (req, res) => {
    const { refreshToken } = req.body;
    spotifyApi.setRefreshToken(refreshToken);

    spotifyApi.refreshAccessToken().then(data => {
        res.json({
            accessToken: data.body.access_token,
            expiresIn: data.body.expires_in,
        });
    }).catch(err => {
        res.status(400).json({ error: 'Failed to refresh token' });
    });
});

// Endpoint to create a playlist based on filters
app.post('/create-playlist', async (req, res) => {
    const { mood, language, numberOfSongs, accessToken } = req.body;
    spotifyApi.setAccessToken(accessToken);

    try {
        // Step 1: Search for tracks based on filters
        const query = `${mood} ${language}`; // Combine mood and language for search
        const searchResponse = await spotifyApi.searchTracks(query, { limit: numberOfSongs });
        // Check if tracks were found (logging)
        if (!searchResponse.body.tracks.items.length) {
            return res.status(404).json({ error: 'No tracks found for the given filters' });
        }

        const tracks = searchResponse.body.tracks.items.map(track => track.uri); // Get track URIs

        // Step 2: Create a new playlist
        const playlistName = `${mood} ${language} Playlist`; // Customize playlist name
        const playlistResponse = await spotifyApi.createPlaylist(playlistName, {
            description: `A ${mood} ${language} playlist generated by Moodify.`,
            public: false, // Make the playlist private
        });

        // Step 3: Add tracks to the playlist
        const playlistId = playlistResponse.body.id;
        await spotifyApi.addTracksToPlaylist(playlistId, tracks);

        res.json({
            playlistUrl: playlistResponse.body.external_urls.spotify,
        });
    } catch (err) {
        console.error('Error creating playlist:', err);
        res.status(500).json({ error: 'Failed to create playlist', details: err.message });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});